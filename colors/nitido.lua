local palette = require("palette.nitido-dark")

vim.cmd([[hi clear]])

vim.api.nvim_set_hl(0, "Normal", { bg = palette.background, fg = palette.mtext })
vim.api.nvim_set_hl(0, "EndOfBuffer", { fg = palette.background })
vim.api.nvim_set_hl(0, "CursorLine", { bg = palette.dp01 })
vim.api.nvim_set_hl(0, "Visual", { bg = palette.dp01 })
vim.api.nvim_set_hl(0, "LineNr", { fg = palette.dtext })
vim.api.nvim_set_hl(0, "CursorLineNr", { fg = palette.mtext, bold = true })
vim.api.nvim_set_hl(0, "NormalFloat", { bg = palette.black })

vim.api.nvim_set_hl(0, "IlluminatedWordText", { bg = palette.dp01 })
vim.api.nvim_set_hl(0, "IlluminatedWordRead", { bg = palette.dp01 })
vim.api.nvim_set_hl(0, "IlluminatedWordWrite", { bg = palette.dp01 })

vim.api.nvim_set_hl(0, "DiagnosticError", { fg = palette.red, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticWarn", { fg = palette.yellow, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticInfo", { fg = palette.cyan, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticHint", { fg = palette.teal, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticOk", { fg = palette.green, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticVirtualTextError", { bg = palette.bg_red, fg = palette.red, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticVirtualTextWarn", { bg = palette.bg_yellow, fg = palette.yellow, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticVirtualTextInfo", { bg = palette.bg_cyan, fg = palette.cyan, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticVirtualTextHint", { bg = palette.bg_teal, fg = palette.teal, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticVirtualTextOk", { bg = palette.bg_green, fg = palette.green, italic = true })
vim.api.nvim_set_hl(0, "DiagnosticUnderlineError", { underline = true, sp = palette.red })
vim.api.nvim_set_hl(0, "DiagnosticUnderlineWarn", { underline = true, sp = palette.yellow })
vim.api.nvim_set_hl(0, "DiagnosticUnderlineInfo", { underline = true, sp = palette.cyan })
vim.api.nvim_set_hl(0, "DiagnosticUnderlineHint", { underline = true, sp = palette.teal })
vim.api.nvim_set_hl(0, "DiagnosticUnderlineOk", { underline = true, sp = palette.green })
vim.api.nvim_set_hl(0, "DiagnosticFloatingError", { fg = palette.red })
vim.api.nvim_set_hl(0, "DiagnosticFloatingWarn", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "DiagnosticFloatingInfo", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "DiagnosticFloatingHint", { fg = palette.teal })
vim.api.nvim_set_hl(0, "DiagnosticFloatingOk", { fg = palette.green })
vim.api.nvim_set_hl(0, "DiagnosticSignError", { fg = palette.red })
vim.api.nvim_set_hl(0, "DiagnosticSignWarn", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "DiagnosticSignInfo", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "DiagnosticSignHint", { fg = palette.teal })
vim.api.nvim_set_hl(0, "DiagnosticSignOk", { fg = palette.green })

vim.api.nvim_set_hl(0, "Comment", { fg = palette.dtext, italic = true })
vim.api.nvim_set_hl(0, "Constant", { fg = palette.orange })
vim.api.nvim_set_hl(0, "String", { fg = palette.green })
vim.api.nvim_set_hl(0, "Character", { fg = palette.teal })
vim.api.nvim_set_hl(0, "Number", { fg = palette.orange })
vim.api.nvim_set_hl(0, "Boolean", { fg = palette.orange })
vim.api.nvim_set_hl(0, "Float", { fg = palette.orange })
vim.api.nvim_set_hl(0, "Identifier", { fg = palette.mtext })
vim.api.nvim_set_hl(0, "Function", { fg = palette.blue })
vim.api.nvim_set_hl(0, "Statement", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "Conditional", { fg = palette.deep_purple, italic = true })
vim.api.nvim_set_hl(0, "Repeat", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "Label", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "Operator", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "Keyword", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "Exception", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "PreProc", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Include", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Define", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Macro", { fg = palette.purple })
vim.api.nvim_set_hl(0, "PreCondit", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Type", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "StorageClass", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "Structure", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "Typedef", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "Special", { fg = palette.purple })
vim.api.nvim_set_hl(0, "SpecialChar", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Tag", { fg = palette.indigo, bold = true })
vim.api.nvim_set_hl(0, "Delimiter", { fg = palette.dtext })
vim.api.nvim_set_hl(0, "SpecialComment", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Debug", { fg = palette.purple })
vim.api.nvim_set_hl(0, "Underlined", { fg = palette.mtext, underline = true })
vim.api.nvim_set_hl(0, "Ignore", { fg = palette.mtext })
vim.api.nvim_set_hl(0, "Error", { fg = palette.red })
vim.api.nvim_set_hl(0, "Todo", { bg = palette.cyan, fg = palette.black })
vim.api.nvim_set_hl(0, "Added", { fg = palette.green })
vim.api.nvim_set_hl(0, "Changed", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "Removed", { fg = palette.red })

-- Treesitter
vim.api.nvim_set_hl(0, "@variable", { fg = palette.mtext })
vim.api.nvim_set_hl(0, "@variable.builtin", { fg = palette.pink })
vim.api.nvim_set_hl(0, "@variable.parameter", { fg = palette.red })
vim.api.nvim_set_hl(0, "@variable.parameter.builtin", { fg = palette.pink })
vim.api.nvim_set_hl(0, "@variable.member", { fg = palette.indigo })
vim.api.nvim_set_hl(0, "@constant", { fg = palette.orange })
vim.api.nvim_set_hl(0, "@constant.builtin", { fg = palette.orange })
vim.api.nvim_set_hl(0, "@constant.macro", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@module", { fg = palette.indigo, italic = true })
vim.api.nvim_set_hl(0, "@module.builtin", { fg = palette.indigo, italic = true })
vim.api.nvim_set_hl(0, "@label", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@string", { fg = palette.green })
vim.api.nvim_set_hl(0, "@string.documentation", { fg = palette.teal })
vim.api.nvim_set_hl(0, "@string.regexp", { fg = palette.orange })
vim.api.nvim_set_hl(0, "@string.escape", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@string.special", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@string.special.url", { fg = palette.blue, italic = true, underline = true })
vim.api.nvim_set_hl(0, "@character", { fg = palette.teal })
vim.api.nvim_set_hl(0, "@character.special", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@boolean", { fg = palette.orange })
vim.api.nvim_set_hl(0, "@number", { fg = palette.orange })
vim.api.nvim_set_hl(0, "@number.float", { fg = palette.orange })
vim.api.nvim_set_hl(0, "@type", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "@type.builtin", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "@type.definition", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "@attribute", { fg = palette.lime })
vim.api.nvim_set_hl(0, "@attribute.builtin", { fg = palette.lime })
vim.api.nvim_set_hl(0, "@property", { fg = palette.indigo })
vim.api.nvim_set_hl(0, "@function", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@function.builtin", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@function.call", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@function.macro", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@function.method", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@function.method.call", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@constructor", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@operator", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "@keyword", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.coroutine", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.function", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.operator", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "@keyword.import", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.type", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.modifier", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.repeat", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.return", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.debug", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.exception", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.conditional", { fg = palette.deep_purple, italic = true })
vim.api.nvim_set_hl(0, "@keyword.conditional.ternary", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "@keyword.directive", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@keyword.directive.define", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "@punctuation.delimiter", { fg = palette.dtext })
vim.api.nvim_set_hl(0, "@punctuation.bracket", { fg = palette.dtext })
vim.api.nvim_set_hl(0, "@punctuation.special", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@comment", { fg = palette.dtext, italic = true })
vim.api.nvim_set_hl(0, "@comment.documentation", { fg = palette.teal, italic = true })
vim.api.nvim_set_hl(0, "@comment.error", { fg = palette.black, bg = palette.red })
vim.api.nvim_set_hl(0, "@comment.warning", { fg = palette.black, bg = palette.yellow })
vim.api.nvim_set_hl(0, "@comment.todo", { fg = palette.black, bg = palette.cyan })
vim.api.nvim_set_hl(0, "@comment.note", { fg = palette.black, bg = palette.teal })
vim.api.nvim_set_hl(0, "@markup.strong", { fg = palette.mtext, bold = true })
vim.api.nvim_set_hl(0, "@markup.italic", { fg = palette.mtext, italic = true })
vim.api.nvim_set_hl(0, "@markup.strikethrough", { fg = palette.mtext, strikethrough = true })
vim.api.nvim_set_hl(0, "@markup.underline", { fg = palette.mtext, underline = true })
vim.api.nvim_set_hl(0, "@markup.heading", { fg = palette.htext, bold = true })
vim.api.nvim_set_hl(0, "@markup.quote", { fg = palette.red, bold = true })
vim.api.nvim_set_hl(0, "@markup.math", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@markup.link", { fg = palette.indigo, bold = true })
vim.api.nvim_set_hl(0, "@markup.link.label", { fg = palette.cyan })
vim.api.nvim_set_hl(0, "@markup.link.url", { fg = palette.purple, italic = true, underline = true })
vim.api.nvim_set_hl(0, "@markup.raw", { fg = palette.teal })
vim.api.nvim_set_hl(0, "@markup.raw.block", { fg = palette.teal })
vim.api.nvim_set_hl(0, "@markup.list", { fg = palette.purple })
vim.api.nvim_set_hl(0, "@markup.list.checked", { fg = palette.green })
vim.api.nvim_set_hl(0, "@markup.list.unchecked", { fg = palette.dtext })
vim.api.nvim_set_hl(0, "@diff.plus", { fg = palette.green })
vim.api.nvim_set_hl(0, "@diff.minus", { fg = palette.red })
vim.api.nvim_set_hl(0, "@diff.delta", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@tag", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@tag.builtin", { fg = palette.blue })
vim.api.nvim_set_hl(0, "@tag.attribute", { fg = palette.indigo, italic = true })
vim.api.nvim_set_hl(0, "@tag.delimiter", { fg = palette.dtext })

vim.api.nvim_set_hl(0, "NeoTreeDirectoryIcon", { fg = palette.blue })
vim.api.nvim_set_hl(0, "NeoTreeDirectoryName", { fg = palette.blue })
vim.api.nvim_set_hl(0, "NeoTreeGitUntracked", { fg = palette.deep_purple })
vim.api.nvim_set_hl(0, "NeoTreeRootName", { fg = palette.blue, bold = true })
vim.api.nvim_set_hl(0, "NeoTreeGitModified", { fg = palette.yellow })
vim.api.nvim_set_hl(0, "NeoTreeGitConflict", { fg = palette.orange })

-- Indent BlankLine
vim.api.nvim_set_hl(0, "IblIndent", { fg = palette.btext })
